#!/bin/bash
exec >cyclictest-client-stderrout.txt
exec 2>&1

. /usr/bin/cyclictest-base || (echo "/usr/bin/cyclictest-base not found"; exit 1)

dump_runtime
validate_label
validate_sw_prereqs

if [ -z "$WORKLOAD_CPUS" ]; then
    exit_error "WORKLOAD_CPUS is not defined.  This must be defined to run cyclictest"
else
    echo "WORKLOAD_CPUS: $WORKLOAD_CPUS"
fi
if [ -z "$HK_CPUS" ]; then
    exit_error "HK_CPUS is not defined.  This must be defined to run cyclictest"
else
    echo "HK_CPUS: $HK_CPUS"
fi

# defaults
duration=60
policy=fifo
interval=100
smt="on"
break_on=0
histogram="--histofall 100 --histfile histogram.txt"


longopts="duration:,priority:,policy:,interval:,distance:,smt:,break-on:"
opts=$(getopt -q -o "D:p:i:d:s:b:" --longoptions "$longopts" -n "getopt.sh" -- "$@");
eval set -- "$opts";
while true; do
    case "$1" in
        -D|--duration)
            shift
            duration=$1
            shift
            ;;
        -p|--priority)
            shift
            priority=$1
            shift
            ;;
        --policy)
            shift
            policy=$1
            shift
            ;;
        -i|--interval)
            shift
            interval=$1
            shift
            ;;
        -d|--distance)
            shift
            distance=$1
            shift
            ;;
        -s|--smt)
            shift
            smt=$1
            shift
            ;;
	-b|--break-on)
	    shift
	    break_on=$1
	    shift
	    ;;
        --)
            shift;
            break
            ;;
        *)
            shift
            ;;
    esac
done

# adjust CPUs to use
cpu_str=""
for cpu in $(echo $WORKLOAD_CPUS | sed -e "s/,/ /g"); do
    cpu_str+=" --cpu $cpu"
done
cmd="${TOOLBOX_HOME}/bin/get-cpus-ordered.py --smt ${smt} ${cpu_str}"
echo "about to run: ${cmd}"
CMD_OUTPUT=$(${cmd})
echo -e "${CMD_OUTPUT}"
WORKLOAD_CPUS=$(echo -e "${CMD_OUTPUT}" | grep "final cpus:" | awk '{ print $3 }')
echo "WORKLOAD_CPUS: ${WORKLOAD_CPUS}"
WORKLOAD_CPUS_COUNT=$(echo -e "${CMD_OUTPUT}" | grep "final cpus count:" | awk '{ print $4 }')
echo "WORKLOAD_CPUS_COUNT: ${WORKLOAD_CPUS_COUNT}"

cpu_str=""
for cpu in $(echo $HK_CPUS | sed -e "s/,/ /g"); do
    cpu_str+=" --cpu $cpu"
done
cmd="${TOOLBOX_HOME}/bin/get-cpus-ordered.py --smt ${smt} ${cpu_str}"
echo "about to run: ${cmd}"
CMD_OUTPUT=$(${cmd})
echo -e "${CMD_OUTPUT}"
HK_CPUS=$(echo -e "${CMD_OUTPUT}" | grep "final cpus:" | awk '{ print $3 }')
echo "HK_CPUS: ${HK_CPUS}"
HK_CPUS_COUNT=$(echo -e "${CMD_OUTPUT}" | grep "final cpus count:" | awk '{ print $4 }')
echo "HK_CPUS_COUNT: ${HK_CPUS_COUNT}"

prio=""
if [ -n "${priority}" ]; then
    prio="--priority ${priority}"
fi

dist=""
if [ -n "${distance}" ]; then
    if [ "${distance}" = "auto" ]; then
        auto_dist=$((interval / WORKLOAD_CPUS_COUNT))
        distance=${auto_dist%.*}
        echo "distance (auto): ${distance}"
    fi
    dist="--distance ${distance}"

    # dist is set to 0 when histogram is enabled
    histogram=""
fi

break=""
if [ ${break_on} -gt 0 ]; then
    break="--breaktrace=${break_on}"
fi

cmd="taskset -c ${WORKLOAD_CPUS},${HK_CPUS} /usr/bin/cyclictest --policy $policy ${prio} --interval ${interval} ${dist} ${histogram} --duration ${duration} --quiet --affinity ${WORKLOAD_CPUS} --threads ${WORKLOAD_CPUS_COUNT} --mlockall --json cyclictest.json --mainaffinity ${HK_CPUS} --smi ${break}"
echo "About to run: $cmd"
date +%s.%N >begin.txt
$cmd >cyclictest-bin-stderrout.txt 2>&1
rc=$?
date +%s.%N >end.txt
if [ $rc -gt 0 ]; then
    exit_error "`cat cyclictest-bin-stderrout.txt`"
fi
